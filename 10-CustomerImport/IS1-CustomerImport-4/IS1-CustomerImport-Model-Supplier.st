Object subclass: #ErpSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!Object subclass: #Supplier	instanceVariableNames: 'id identificationType identificationNumber addresses name customers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 20:28'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 21:29'!addCustomer: aCustomer	customers add: aCustomer ! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 20:28'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 20:28'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 20:28'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 22:07'!customersIsEmpty		^customers isEmpty ! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 20:28'!addresses	^ addresses! !!Supplier methodsFor: 'addresses' stamp: 'Guido 7/1/2018 22:06'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!Supplier methodsFor: 'name' stamp: 'Guido 7/1/2018 20:33'!name: aName 	name := aName! !!Supplier methodsFor: 'name' stamp: 'Guido 7/1/2018 20:33'!name	^name ! !!Supplier methodsFor: 'initialization' stamp: 'Guido 7/1/2018 22:08'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !!Supplier methodsFor: 'identification' stamp: 'Guido 7/1/2018 20:28'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'Guido 7/1/2018 20:28'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'Guido 7/1/2018 20:28'!isIdentifiedAs: anIdType numbered: anIdNumber 		^identificationType = anIdType and: [ identificationNumber = anIdNumber  ]! !!Supplier methodsFor: 'identification' stamp: 'Guido 7/1/2018 20:28'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'Guido 7/1/2018 20:28'!identificationNumber		^identificationNumber ! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 21:29'!alwaysImportedSupplierRecord	^ 'S,Supplier1,', self alwaysImportedSupplierIdType, ',', self alwaysImportedSupplierIdNumber ! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 22:08'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedSupplierRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 22:08'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 22:11'!alwaysImportedSupplierIdNumber	^ '123'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 21:29'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 22:09'!addressWithoutSupplierTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'Guido 7/1/2018 22:11'!alwaysImportedSupplierIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 22:28'!newCustomerRecordStartingWithMoreThanOneNCTestData		^ ReadStream on: self alwaysImportedSupplierRecord ,'NCC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 22:17'!existingCustomerRecordWithMoreThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord ,'EC,D,1,2'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 23:01'!validTestData	^ ReadStream on: self alwaysImportedSupplierRecord,'NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 22:17'!existingCustomerRecordStartingWithMoreThanOneECTestData		^ ReadStream on: self alwaysImportedSupplierRecord ,'ECC,D,22333444'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 22:59'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'Guido 7/1/2018 22:17'!existingCustomerRecordWithLessThanThreeFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord ,'EC,D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Guido 7/1/2018 19:57'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Guido 7/1/2018 22:10'!alwaysImportedNewCustomerRecord	^ 'NC,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Guido 7/1/2018 19:57'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'Guido 7/1/2018 21:29'!alwaysImportedSupplier	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedSupplierIdType.	anIdentificationNumber := self alwaysImportedSupplierIdNumber.	^ system supplierSystem		supplierIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'Guido 7/1/2018 20:27'!setUp	system := Environment current createErpSystem.	system start.	system beginTransaction! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'Guido 7/1/2018 19:57'!tearDown	system commit.	system shutdown! !!SupplierImportTest methodsFor: 'importing' stamp: 'Guido 7/1/2018 21:29'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream using: system) import! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:28'!newCustomerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord ,'NC,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:44'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:44'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:45'!testShouldNotImportNewCustomerRecordsStartingWithMoreThanNC	self		should: [ self				importSuppliersFrom: self newCustomerRecordStartingWithMoreThanOneNCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:26'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importSuppliersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:27'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutSupplierErrorDescription.			self assert: system supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:28'!testCanNotImportNewCustomerRecordWithLessThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:45'!testShouldNotImportExistingCustomerRecordsStartingWithMoreThanEC	self		should: [ self				importSuppliersFrom: self existingCustomerRecordStartingWithMoreThanOneECTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:18'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:44'!testImportSuppliers	| existingCustomer |		existingCustomer := Customer new		firstName: 'Existente';		lastName: 'Existente apellido';		identificationType: 'D';		identificationNumber: '5456774';		yourself.			system customerSystem add: existingCustomer.	self importSuppliersFrom: self validTestData.	self assertImportedSupplierSizeIsCorrect.	self assertSupplier1WasImportedCorrectly: existingCustomer ! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:27'!testCanNotImportExistingCustomerRecordWithMoreThanThreeFields	self		should: [ self				importSuppliersFrom: self existingCustomerRecordWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'Guido 7/1/2018 22:27'!testCanNotImportExistingCustomerRecordWithLessThanThreeFields	self		should: [ self				importSuppliersFrom: self existingCustomerRecordWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 19:57'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:29'!newCustomerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'',self alwaysImportedNewCustomerRecord, ',x'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:15'!assert: aSupplier hasCustomerIdentifiedAs: idType numbered: idNumber thatIs: aCustomer	self assert: (aSupplier customerIdentifiedAs: idType numbered: idNumber) equals: aCustomer ! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 19:57'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:31'!newCustomerWithoutSupplierTestData		^ ReadStream on: 'NC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:32'!testCanNotImportNewCustomerWithoutSupplier	self		should: [ self importSuppliersFrom: self newCustomerWithoutSupplierTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter customerWithoutSupplierErrorDescription.			self assert: system supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 19:57'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:16'!assertPepeSanchezWasImportedCorrectlyOn: aSupplier 		| customer |	customer := aSupplier customerIdentifiedAs: self alwaysImportedCustomerIdType numbered: self alwaysImportedCustomerIdNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 0! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 19:57'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:16'!assertSupplier1WasImportedCorrectly: existingCustomer		| supplier |		supplier := system supplierSystem supplierIdentifiedAs: 'D' numbered: '123'.	self assert: supplier name equals: 'Supplier1'.		self assertPepeSanchezWasImportedCorrectlyOn: supplier.	self assert: supplier hasCustomerIdentifiedAs: 'D' numbered: '5456774' thatIs: existingCustomer.		self assert: supplier hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:29'!testCanNotImportNewCustomerRecordWithMoreThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidCustomerRecordErrorDescription.			self assert: self alwaysImportedSupplier customersIsEmpty ]! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:16'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedSupplier. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'Guido 7/1/2018 22:15'!assertImportedSupplierSizeIsCorrect	self assert: system supplierSystem numberOfSuppliers equals: 1! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream record system newSupplier'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'Guido 7/1/2018 22:52'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidCustomerRecord ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'Guido 7/1/2018 20:00'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing' stamp: 'Guido 7/1/2018 20:00'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'initialization' stamp: 'Guido 7/1/2018 20:00'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guido 7/1/2018 20:00'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guido 7/1/2018 20:00'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'Guido 7/1/2018 20:00'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal'!pplierRecord,'NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 21:29'!importSupplier 	newSupplier := Supplier new.	newSupplier name: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth .	system supplierSystem add: newSupplier! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 21:31'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 21:29'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 21:29'!isExistingCustomerRecord		^record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 20:00'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 20:00'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 20:00'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 22:53'!importExistingCustomer		| existingCustomer |		self assertValidExistingCustomerRecordSize.		existingCustomer := system customerSystem customerIdentifiedAs: record second numbered: record third.	newSupplier addCustomer: existingCustomer ! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 21:29'!isSupplierRecord		^record first = 'S'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'Guido 7/1/2018 22:53'!importNewCustomer	| newCustomer |	self assertThereIsSupplierForCustomer.	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system customerSystem add: newCustomer.	newSupplier addCustomer: newCustomer ! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guido 7/1/2018 20:00'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address'!assertThereIsSupplierForCustomer	newSupplier isNil ifTrue: [ self signalCustomerWithoutSupplierError ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guido 7/1/2018 22:52'!signalCustomerWithoutSupplierError	self error: self class customerWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guido 7/1/2018 20:00'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guido 7/1/2018 22:58'!importAddress	| newAddress |	self assertThereIsSupplierForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier  addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'Guido 7/1/2018 22:51'!assertThereIsSupplierForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guido 7/1/2018 20:00'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guido 7/1/2018 20:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guido 7/1/2018 22:49'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'Guido 7/1/2018 20:00'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'Guido 7/1/2018 20:00'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'Guido 7/1/2018 22:32'!customerWithoutSupplierErrorDescription		^'No hay supplier valido para ese customer'! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!SupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:18'!add: aCustomer	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:18'!allCustomers	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:18'!customersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:18'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:18'!start	self subclassResponsibility! !!SupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:18'!shutdown	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:18'!beginTransaction	self subclassResponsibility! !!SupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:18'!commit	self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:20'!add: aCustomer	session persist: aCustomer! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:20'!allCustomers	^ session selectAllOfType: Customer! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:20'!customersIsEmpty	^ self allCustomers isEmpty! !!PersistentSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 20:20'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'No o more that one customer found' ].	^ customers anyOne! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:20'!start	session start! !!PersistentSupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:20'!shutdown	session shutdown! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'Guido 7/1/2018 20:20'!initialize		super initialize.	self initializeSession. ! !!PersistentSupplierSystem methodsFor: 'initialization' stamp: 'Guido 7/1/2018 20:20'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'Guido 7/1/2018 20:20'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'Guido 7/1/2018 20:20'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:20'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:20'!commit	session commit! !ErpSystem subclass: #TransientErpSystem	instanceVariableNames: 'supplierSystem customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 21:29'!commit	! !!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 20:58'!supplierSystem	^ supplierSystem! !!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 21:29'!start		supplierSystem := TransientSupplierSystem new.	customerSystem := TransientCustomerSystem new.	! !!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 21:29'!beginTransaction		! !!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 22:48'!shutdown	! !!TransientErpSystem methodsFor: 'accessing' stamp: 'Guido 7/1/2018 20:58'!customerSystem	^ customerSystem ! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model-Supplier'!!TransientSupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:20'!beginTransaction		! !!TransientSupplierSystem methodsFor: 'transaction' stamp: 'Guido 7/1/2018 20:20'!commit		! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:20'!start	! !!TransientSupplierSystem methodsFor: 'system live cycle' stamp: 'Guido 7/1/2018 20:20'!shutdown		! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'Guido 7/1/2018 21:29'!initialize		suppliers := OrderedCollection new! !!TransientSupplierSystem methodsFor: 'initialization' stamp: 'Guido 7/1/2018 21:29'!numberOfSuppliers		^suppliers size! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 21:29'!add: aCustomer	suppliers add: aCustomer! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 22:33'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^suppliers detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ]! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 21:29'!allCustomers	^ suppliers copy! !!TransientSupplierSystem methodsFor: 'customers' stamp: 'Guido 7/1/2018 22:43'!suppliersIsEmpty	^ suppliers isEmpty ! !